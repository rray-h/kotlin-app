import React from 'react';

function Smart () {

	const lefta = '<';
	const righta = '>';

	const leftb = '{';
	const rightb = '}';

	return (

		<div className="main-content">
			
			<div className="main-content__container">
				<div className="main-content__body">
					
					<div className="main-content__about about">
						
						<div className="about__title">Умные приведения</div>
						<div className="about__text">В большинстве случаев вам не нужно использовать явные приведения в Kotlin, потому что компилятор отслеживает is-проверки и явные преобразования для неизменяемых значений и
							вставляет (безопасно) приведения автоматически, там, где они нужны.(Пример 1) <br/><br/>
							Компилятор достаточно умён для того, чтобы понимать, что приведения безопасны в случаях, когда проверка на несоответствие типу (!is) приводит к выходу из функции(Пример 2).<br/><br/>
							Или в случаях, когда приводимая переменная находится справа от оператора && или ||, а соответствующая проверка (обычная или отрицательная) находится слева(Пример 3).<br/><br/>
							Умные приведения работают вместе с when-выражениями и циклами while(Пример 4).<br/><br/>
							Заметьте, что умные приведения работают только тогда, когда компилятор может гарантировать, что переменная не изменится между проверкой и использованием.
							Точнее говоря, умные приведения будут работать:<br/>
							с локальными val переменными - всегда за исключением локальных делегированных свойств.;<br/>

							с val свойствами - если поле имеет модификатор доступа private или internal, или проверка происходит в том же модуле, в котором объявлено это свойство.
							  Умные приведения неприменимы к публичным свойствам или свойствам, которые имеют переопределённые getter'ы;<br/>

							с локальными var переменными - если переменная не изменяется между проверкой и использованием, не захватывается лямбдой,
							  которая её модифицирует и не является локальным делегированным свойством;<br/>

							с var свойствами - никогда, потому что переменная может быть изменена в любое время другим кодом. </div>
						<div className="about__links">
							<a href="https://kotlinlang.ru/docs/typecasts.html">https://kotlinlang.ru/docs/typecasts.html</a>
						</div>

					</div>

					<div className="main-content__code">
					Пример 1: <br/>
					fun demo(x: Any) {leftb} <br/>
					⠀⠀⠀⠀if (x is String) {leftb}<br/>
					⠀⠀⠀⠀⠀⠀⠀⠀print(x.length) // x автоматически преобразовывается в String<br/>
					⠀⠀⠀⠀}<br/>
					}<br/><br/>

					Пример 2:<br/>
					if (x !is String) return<br/>
					print(x.length) // x автоматически преобразовывается в String<br/><br/>

					Пример 3:<br/>
					// x автоматически преобразовывается в String справа от `||`<br/>
					if (x !is String || x.length == 0) return<br/><br/>

					// x автоматически преобразовывается в String справа от `&&`<br/>
					if (x is String && x.length > 0) {leftb}<br/>
					⠀⠀⠀⠀print(x.length) // x автоматически преобразовывается в String<br/>
					}<br/>
					Пример 4:<br/>
					when (x) {leftb}<br/>
					⠀⠀⠀⠀is Int -> print(x + 1)<br/>
					⠀⠀⠀⠀is String -> print(x.length + 1)<br/>
					⠀⠀⠀⠀is IntArray -> print(x.sum())<br/>
					}</div>

				</div>	
			</div>

		</div>

	);
}

export default Smart;